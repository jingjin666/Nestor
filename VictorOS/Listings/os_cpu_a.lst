


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************
    2 00000000         ; È«¾Ö±äÁ¿&º¯Êý
    3 00000000         ;*******************************************************
                       ************
    4 00000000                 IMPORT           OSTCBCurPtr ; Íâ²¿ÎÄ¼þÒýÈËµÄ²Î¿
                                                            ¼
    5 00000000                 IMPORT           OSTCBHighRdyPtr
    6 00000000                 IMPORT           OSPrioCur
    7 00000000                 IMPORT           OSPrioHighRdy
    8 00000000         
    9 00000000                 EXPORT           OSStartHighRdy 
                                                            ; ¸ÃÎÄ¼þ¶¨ÒåµÄº¯Êý
   10 00000000                 EXPORT           OS_CPU_PendSVHandler
   11 00000000                 EXPORT           CPU_IntDis
   12 00000000                 EXPORT           CPU_IntEn
   13 00000000                 EXPORT           CPU_SR_Save
   14 00000000                 EXPORT           CPU_SR_Restore
   15 00000000                 EXPORT           CPU_CntLeadZeros
   16 00000000                 EXPORT           CPU_CntTrailZeros
   17 00000000         
   18 00000000         ;*******************************************************
                       ************
   19 00000000         ;³£Á¿
   20 00000000         ;ÓÐ¹ØÄÚºËÍâÉè¼Ä´æÆ÷¶¨Òå¿É²Î¿¼¹Ù·½ÎÄµµ£ºSTM32F10xxx Corte
                       x-M3 programming manual
   21 00000000         ;ÏµÍ³¿ØÖÆ¿éÍâÉè SCB µØÖ··¶Î§£º0xE000ED00-0xE000ED3F
   22 00000000         ;*******************************************************
                       ************
   23 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼°×´Ì¬¼Ä´
                                                            æÆ÷ SCB_ICSR¡£
   24 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷ 
                                                            SCB_SHPR3£º
   25 00000000         ; bit16~23
   26 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV ÓÅÏÈ¼¶µÄÖµ
                                                            (×îµÍ)¡£
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢ PendSV Òì³£µ
                                                            ÄÖµ Bit28£ºPENDSVSE
                                                            T
   28 00000000         
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         
   33 00000000                 PRESERVE8
   34 00000000                 THUMB
   35 00000000         
   36 00000000                 AREA             CODE, CODE, READONLY



ARM Macro Assembler    Page 2 


   37 00000000         
   38 00000000         ;*******************************************************
                       ************
   39 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   40 00000000         ;
   41 00000000         ; Description: Disable/Enable interrupts.
   42 00000000         ;
   43 00000000         ; Prototypes : void  CPU_IntDis(void);
   44 00000000         ;              void  CPU_IntEn (void);
   45 00000000         ;*******************************************************
                       ************
   46 00000000         CPU_IntDis
   47 00000000 B672            CPSID            I
   48 00000002 4770            BX               LR
   49 00000004         
   50 00000004         
   51 00000004         CPU_IntEn
   52 00000004 B662            CPSIE            I
   53 00000006 4770            BX               LR
   54 00000008         
   55 00000008         ;*******************************************************
                       *************************************************
   56 00000008         ;                                      CRITICAL SECTION 
                       FUNCTIONS
   57 00000008         ;
   58 00000008         ; Description : Disable/Enable interrupts by preserving 
                       the state of interrupts.  Generally speaking, the
   59 00000008         ;               state of the interrupt disable flag is s
                       tored in the local variable 'cpu_sr' & interrupts
   60 00000008         ;               are then disabled ('cpu_sr' is allocated
                        in all functions that need to disable interrupts).
   61 00000008         ;               The previous interrupt state is restored
                        by copying 'cpu_sr' into the CPU's status register.
   62 00000008         ;
   63 00000008         ; Prototypes  : CPU_SR  CPU_SR_Save   (void);
   64 00000008         ;               void    CPU_SR_Restore(CPU_SR  cpu_sr);
   65 00000008         ;
   66 00000008         ; Note(s)     : (1) These functions are used in general 
                       like this :
   67 00000008         ;
   68 00000008         ;                       void  Task (void  *p_arg)
   69 00000008         ;                       {
   70 00000008         ;                           CPU_SR_ALLOC();             
                               /* Allocate storage for CPU status register */
   71 00000008         ;                               :
   72 00000008         ;                               :
   73 00000008         ;                           CPU_CRITICAL_ENTER();       
                               /* cpu_sr = CPU_SR_Save();                  */
   74 00000008         ;                               :
   75 00000008         ;                               :
   76 00000008         ;                           CPU_CRITICAL_EXIT();        
                               /* CPU_SR_Restore(cpu_sr);                  */
   77 00000008         ;                               :
   78 00000008         ;                       }
   79 00000008         ;*******************************************************
                       *************************************************
   80 00000008         
   81 00000008         CPU_SR_Save



ARM Macro Assembler    Page 3 


   82 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   83 0000000C B672            CPSID            I
   84 0000000E 4770            BX               LR
   85 00000010         
   86 00000010         
   87 00000010         CPU_SR_Restore                       ; See Note #2.
   88 00000010 F380 8810       MSR              PRIMASK, R0
   89 00000014 4770            BX               LR
   90 00000016         
   91 00000016         ;*******************************************************
                       *************************************************
   92 00000016         ;                                          ¼ÆËãÇ°µ¼0º¯Êý
                       
   93 00000016         ;
   94 00000016         ; ÃèÊö      £º
   95 00000016         ;
   96 00000016         ; º¯ÊýÉùÃ÷  £º CPU_DATA  CPU_CntLeadZeros(CPU_DATA  val)
                       ;
   97 00000016         ;             
   98 00000016         ;*******************************************************
                       *************************************************
   99 00000016         CPU_CntLeadZeros
  100 00000016 FAB0 F080       CLZ              R0, R0      ; Count leading zer
                                                            os
  101 0000001A 4770            BX               LR
  102 0000001C         
  103 0000001C         ;*******************************************************
                       *************************************************
  104 0000001C         ;                                          ¼ÆËãºóµ¼0º¯Êý
                       
  105 0000001C         ;
  106 0000001C         ; ÃèÊö      £º
  107 0000001C         ;
  108 0000001C         ; º¯ÊýÉùÃ÷  £º CPU_DATA  CPU_CntTrailZeros(CPU_DATA  val
                       );
  109 0000001C         ;             
  110 0000001C         ;*******************************************************
                       *************************************************
  111 0000001C         
  112 0000001C         CPU_CntTrailZeros
  113 0000001C FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  114 00000020 FAB0 F080       CLZ              R0, R0      ; Count trailing ze
                                                            ros
  115 00000024 4770            BX               LR
  116 00000026         
  117 00000026         ;*******************************************************
                       ************
  118 00000026         ;    ¿ªÊ¼Ò»´ÎÉÏÏÂÎÄÇÐ»»
  119 00000026         ;
  120 00000026         ;
  121 00000026         ;*******************************************************
                       ************
  122 00000026         OSStartHighRdy
  123 00000026 4813            LDR              R0, = NVIC_SYSPRI14 ; ÉèÖÃ Pend
                                                            SV Òì³£ÓÅÏÈ¼¶Îª×îµÍ
                                                            
  124 00000028 F04F 01FF       LDR              R1, = NVIC_PENDSV_PRI



ARM Macro Assembler    Page 4 


  125 0000002C 7001            STRB             R1, [R0]
  126 0000002E         
  127 0000002E 2000            MOVS             R0, #0      ;ÉèÖÃ psp µÄÖµÎª 0£
                                                            ¬¿ªÊ¼µÚÒ»´ÎÉÏÏÂÎÄÇÐ
                                                            »»
  128 00000030 F380 8809       MSR              PSP, R0
  129 00000034         
  130 00000034 4810            LDR              R0, = NVIC_INT_CTRL 
                                                            ; ´¥·¢ PendSV Òì³£
  131 00000036         
  132 00000036 F04F 5180       LDR              R1, = NVIC_PENDSVSET
  133 0000003A 6001            STR              R1, [R0]
  134 0000003C         
  135 0000003C B662            CPSIE            I           ; Ê¹ÄÜ×ÜÖÐ¶Ï£¬NMI º
                                                            Í HardFault ³ýÍâ
  136 0000003E         
  137 0000003E         OSStartHang
  138 0000003E E7FE            B                OSStartHang ; ³ÌÐòÓ¦ÓÀÔ¶²»»áÔËÐ
                                                            Ðµ½ÕâÀï
  139 00000040         
  140 00000040         ;*******************************************************
                       ****************
  141 00000040         ; OS_CPU_PendSVHandler Òì³£
  142 00000040         ;*******************************************************
                       ****************
  143 00000040         OS_CPU_PendSVHandler
  144 00000040         ; ¹ØÖÐ¶Ï£¬NMI ºÍ HardFault ³ýÍâ£¬·ÀÖ¹ÉÏÏÂÎÄÇÐ»»±»ÖÐ¶Ï
  145 00000040 B672            CPSID            I
  146 00000042         
  147 00000042         ; ½« psp µÄÖµ¼ÓÔØµ½ R0
  148 00000042 F3EF 8009       MRS              R0, PSP
  149 00000046         
  150 00000046         ; ÅÐ¶Ï R0£¬Èç¹ûÖµÎª 0 ÔòÌø×ªµ½ OS_CPU_PendSVHandler_nosa
                       ve
  151 00000046         ; ½øÐÐµÚÒ»´ÎÈÎÎñÇÐ»»µÄÊ±ºò£¬R0 ¿Ï¶¨Îª 0
  152 00000046 B120            CBZ              R0, OS_CPU_PendSVHandler_nosave
  153 00000048         
  154 00000048         ;-----------------------Ò»¡¢±£´æÉÏÎÄ--------------------
                       ---------
  155 00000048         ; ÈÎÎñµÄÇÐ»»£¬¼´°ÑÏÂÒ»¸öÒªÔËÐÐµÄÈÎÎñµÄ¶ÑÕ»ÄÚÈÝ¼ÓÔØµ½ CPU
                        ¼Ä´æÆ÷ÖÐ
  156 00000048         ;-------------------------------------------------------
                       ------- 
  157 00000048         ; ÔÚ½øÈë PendSV Òì³£µÄÊ±ºò£¬µ±Ç° CPU µÄ xPSR£¬PC£¨ÈÎÎñÈë
                       ¿ÚµØÖ·£©£¬
  158 00000048         ; R14£¬R12£¬R3£¬R2£¬R1£¬R0 »á×Ô¶¯´æ´¢µ½µ±Ç°ÈÎÎñ¶ÑÕ»£¬
  159 00000048         ; Í¬Ê±µÝ¼õ PSP µÄÖµ£¬Ëæ±ãÍ¨¹ý ´úÂë£ºMRS R0, PSP °Ñ PSP µ
                       ÄÖµ´«¸ø R0
  160 00000048         
  161 00000048         ; ÊÖ¶¯´æ´¢ CPU ¼Ä´æÆ÷ R4-R11 µÄÖµµ½µ±Ç°ÈÎÎñµÄ¶ÑÕ»
  162 00000048 E920 0FF0       STMDB            R0!, {R4-R11}
  163 0000004C         
  164 0000004C         ; ¼ÓÔØ OSTCBCurPtr Ö¸ÕëµÄµØÖ·µ½ R1£¬ÕâÀï LDR ÊôÓÚÎ±Ö¸Áî
  165 0000004C 490B            LDR              R1, = OSTCBCurPtr
  166 0000004E         ; ¼ÓÔØ OSTCBCurPtr Ö¸Õëµ½ R1£¬ÕâÀï LDR ÊôÓÚ ARM Ö¸Áî
  167 0000004E 6809            LDR              R1, [R1]
  168 00000050         ;  ´æ´¢ R0 µÄÖµµ½ OSTCBCurPtr->OSTCBStkPtr£¬Õâ¸öÊ±ºò R0 
                       ´æµÄÊÇÈÎÎñ¿ÕÏÐÕ»µÄÕ»¶¥
  169 00000050 6008            STR              R0, [R1]



ARM Macro Assembler    Page 5 


  170 00000052         
  171 00000052         ;-----------------------¶þ¡¢ÇÐ»»ÏÂÎÄ--------------------
                       ---------
  172 00000052         ; ÊµÏÖ OSTCBCurPtr = OSTCBHighRdyPtr
  173 00000052         ; °ÑÏÂÒ»¸öÒªÔËÐÐµÄÈÎÎñµÄ¶ÑÕ»ÄÚÈÝ¼ÓÔØµ½ CPU ¼Ä´æÆ÷ÖÐ
  174 00000052         ;-------------------------------------------------------
                       -------
  175 00000052         OS_CPU_PendSVHandler_nosave
  176 00000052         ; OSPrioCur = OSPrioHighRdy
  177 00000052 480B            LDR              R0, = OSPrioCur
  178 00000054 490B            LDR              R1, = OSPrioHighRdy
  179 00000056 780A            LDRB             R2, [R1]
  180 00000058 7002            STRB             R2, [R0]
  181 0000005A         
  182 0000005A         ; ¼ÓÔØ OSTCBCurPtr Ö¸ÕëµÄµØÖ·µ½ R0£¬ÕâÀï LDR ÊôÓÚÎ±Ö¸Áî
  183 0000005A 4808            LDR              R0, = OSTCBCurPtr
  184 0000005C         ; ¼ÓÔØ OSTCBHighRdyPtr Ö¸ÕëµÄµØÖ·µ½ R1£¬ÕâÀï LDR ÊôÓÚÎ±Ö
                       ¸Áî
  185 0000005C 490A            LDR              R1, = OSTCBHighRdyPtr
  186 0000005E         ; ¼ÓÔØ OSTCBHighRdyPtr Ö¸Õëµ½ R2£¬ÕâÀï LDR ÊôÓÚ ARM Ö¸Áî
                        
  187 0000005E 680A            LDR              R2, [R1]
  188 00000060         ; ´æ´¢ OSTCBHighRdyPtr µ½ OSTCBCurPtr
  189 00000060 6002            STR              R2, [R0]
  190 00000062         
  191 00000062         ; ¼ÓÔØ OSTCBHighRdyPtr µ½ R0 
  192 00000062 6810            LDR              R0, [R2]
  193 00000064         ; ¼ÓÔØÐèÒªÊÖ¶¯±£´æµÄÐÅÏ¢µ½ CPU ¼Ä´æÆ÷ R4-R11
  194 00000064 E8B0 0FF0       LDMIA            R0!, {R4-R11}
  195 00000068         
  196 00000068         ; ¸üÐÂ PSP µÄÖµ£¬Õâ¸öÊ±ºò PSP Ö¸ÏòÏÂÒ»¸öÒªÖ´ÐÐµÄÈÎÎñµÄ¶Ñ
                       Õ»µÄÕ»µ×
  197 00000068         ;£¨Õâ¸öÕ»µ×ÒÑ¾­¼ÓÉÏ¸Õ¸ÕÊÖ¶¯¼ÓÔØµ½ CPU ¼Ä´æÆ÷ R4-R11 µÄÆ«
                       ÒÆ£© 
  198 00000068 F380 8809       MSR              PSP, R0
  199 0000006C         
  200 0000006C         ; È·±£Òì³£·µ»ØÊ¹ÓÃµÄ¶ÑÕ»Ö¸ÕëÊÇ PSP£¬¼´ LR ¼Ä´æÆ÷µÄÎ» 2 Ò
                       ªÎª 1
  201 0000006C F04E 0E04       ORR              LR, LR, #0x04
  202 00000070         
  203 00000070         ; ¿ªÖÐ¶Ï
  204 00000070 B662            CPSIE            I
  205 00000072         
  206 00000072         ; Òì³£·µ»Ø£¬Õâ¸öÊ±ºòÈÎÎñ¶ÑÕ»ÖÐµÄÊ£ÏÂÄÚÈÝ½«»á×Ô¶¯¼ÓÔØµ½ x
                       PSR£¬
  207 00000072         ; PC£¨ÈÎÎñÈë¿ÚµØÖ·£©£¬R14£¬R12£¬R3£¬R2£¬R1£¬R0£¨ÈÎÎñµÄÐÎ
                       ²Î£©
  208 00000072         ; Í¬Ê± PSP µÄÖµÒ²½«¸üÐÂ£¬¼´Ö¸ÏòÈÎÎñ¶ÑÕ»µÄÕ»¶¥¡£
  209 00000072         ; ÔÚ STM32 ÖÐ£¬¶ÑÕ»ÊÇÓÉ¸ßµØÖ·ÏòµÍµØÖ·Éú³¤µÄ¡£
  210 00000072 4770            BX               LR
  211 00000074                 END
              E000ED22 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -IE:\keil\Nestor\Vi



ARM Macro Assembler    Page 6 


ctorOS\RTE -IF:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IF:\Keil_v5\ARM
\PACK\Keil\STM32F4xx_DFP\2.5.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --pred
efine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 515" --predefine=
"_RTE_ SETA 1" --predefine="STM32F429xx SETA 1" --list=.\listings\os_cpu_a.lst 
User\victorOS\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 36 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      None
Comment: CODE unused
CPU_CntLeadZeros 00000016

Symbol: CPU_CntLeadZeros
   Definitions
      At line 99 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 15 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_CntLeadZeros used once
CPU_CntTrailZeros 0000001C

Symbol: CPU_CntTrailZeros
   Definitions
      At line 112 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 16 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_CntTrailZeros used once
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 46 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 11 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 51 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 12 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_IntEn used once
CPU_SR_Restore 00000010

Symbol: CPU_SR_Restore
   Definitions
      At line 87 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 14 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_SR_Restore used once
CPU_SR_Save 00000008

Symbol: CPU_SR_Save
   Definitions
      At line 81 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 13 in file User\victorOS\Ports\os_cpu_a.asm
Comment: CPU_SR_Save used once
OSStartHang 0000003E

Symbol: OSStartHang



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 137 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 138 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 00000026

Symbol: OSStartHighRdy
   Definitions
      At line 122 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 9 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000040

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 143 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 10 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000052

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 175 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 152 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 23 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 130 in file User\victorOS\Ports\os_cpu_a.asm
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 132 in file User\victorOS\Ports\os_cpu_a.asm
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 26 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 124 in file User\victorOS\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 24 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 123 in file User\victorOS\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 6 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 177 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 7 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 178 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 4 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 165 in file User\victorOS\Ports\os_cpu_a.asm
      At line 183 in file User\victorOS\Ports\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 5 in file User\victorOS\Ports\os_cpu_a.asm
   Uses
      At line 185 in file User\victorOS\Ports\os_cpu_a.asm
Comment: OSTCBHighRdyPtr used once
4 symbols
356 symbols in table
